const TelegramApi = require("node-telegram-bot-api");
const University = require("./models/Univer");
const User = require("./models/User");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const bot = new TelegramApi(process.env.TELEGRAM_BOT, { polling: true });
console.log("bot working")

const toString = ({ title, url, isAccessible }) => {
  return `–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: [${title}](${url})\n–î–æ—Å—Ç—É–ø–µ–Ω: ${
    isAccessible ? "‚úÖ" : "üö´"
  }\n \n`;
};

const sendNotify = async (university, isWorkingNow) => {
  for (let id of university.subscribers) {
    const user = await User.findById(id);
    if (user.telegram.connected && user.telegram.notifications) {
      if (isWorkingNow) {
        await bot.sendSticker(
          user.telegram.chatId,
          "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/192/22.webp"
        );
        return await bot.sendMessage(
          user.telegram.chatId,
          `C–∞–π—Ç –í–£–ó–∞ [${university.title}](${university.url}) –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É`,
          { parse_mode: "Markdown" }
        );
      } else {
        await bot.sendSticker(
          user.telegram.chatId,
          "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/23.webp"
        );
        return await bot.sendMessage(
          user.telegram.chatId,
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–∞–π—Ç –í–£–ó–∞ [${university.title}](${university.url}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`,
          { parse_mode: "Markdown" }
        );
      }
    }
  }
};

const attackNotify = async () => {
  const users = await User.find({
    "telegram.connected": true,
    "telegram.notifications": true,
  });
  for (let user of users) {
    await bot.sendSticker(
      user.telegram.chatId,
      "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/12.webp"
    );
    return await bot.sendMessage(
      user.telegram.chatId,
      "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–¥–æ—Å –∞—Ç–∞–∫–∞ –Ω–∞ —Å–∞–π—Ç—ã –í–£–ó–æ–≤"
    );
  }
};

bot.setMyCommands([
  { command: "/start", description: "lkzsjernfdlksjdv" },
  { command: "/universities", description: "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤" },
  { command: "/auth", description: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" },
  { command: "/cancelnotifications", description: "–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" },
  { command: "/setnotifications", description: "–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" },
]);

bot.on("message", async (msg) => {
  const { text, chat } = msg;
  if (text === "/start") {
    await bot.sendSticker(
      chat.id,
      "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/1.webp"
    );
    return await bot.sendMessage(
      chat.id,
      "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–∂–≤–∞—Ç—å!**\n \n–ù–∞–ø–∏—à–∏—Ç–µ `/auth Email Password` —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n \n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/universities` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –í–£–ó–æ–≤",
      {
        parse_mode: "Markdown",
      }
    );
  }
  if (text === "/universities") {
    const universites = await University.find({}, "title url isAccessible");
    let message = "";
    for (const i in universites) {
      message = message + toString(universites[i]);
    }
    return await bot.sendMessage(chat.id, message, {
      parse_mode: "Markdown",
    });
  }
  if (text.split(" ")[0] === "/auth") {
    const email = text.split(" ")[1];
    const password = text.split(" ")[2];
    const user = await User.findOne({ email: email });
    if (user) {
      if (user.telegram.connected) {
        return await bot.sendMessage(
          chat.id,
          "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω telegram"
        );
      }
      const hashPassword = user.password;
      const validPassword = bcrypt.compareSync(password, hashPassword);
      if (validPassword) {
        user.telegram.chatId = chat.id;
        user.telegram.connected = true;
        await user.save();
        await bot.sendMessage(chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
        return await bot.sendMessage(
          chat.id,
          "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω—è, –µ—Å–ª–∏ —Å–∞–π—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –í–£–ó–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n \n–ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ `/cancelnotifications`",
          { parse_mode: "Markdown" }
        );
      }
      return await bot.sendMessage(chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }
    return await bot.sendMessage(chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
  if (text === "/cancelnotifications") {
    const user = await User.findOneAndUpdate({ "telegram.chatId": chat.id });
    if (user.telegram.connected) {
      user.telegram.notifications = false;
      await user.save();
      return bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
    }
    return bot.sendMessage(
      chat.id,
      "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ –±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–ø–∏—à–∏—Ç–µ `/auth Email Password`"
    );
  }
  if (text === "/setnotifications") {
    const user = await User.findOneAndUpdate({ "telegram.chatId": chat.id });
    if (user.telegram.connected) {
      user.telegram.notifications = true;
      await user.save();
      return bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
    }
    return bot.sendMessage(
      chat.id,
      "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ –±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–ø–∏—à–∏—Ç–µ `/auth Email Password`"
    );
  }
  return await bot.sendMessage(chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã");
});

exports.bot = bot;
exports.sendNotify = sendNotify;
exports.attackNotify = attackNotify;
