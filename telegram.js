const TelegramApi = require("node-telegram-bot-api");
const University = require("./models/Univer");
const User = require("./models/User");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const bot = new TelegramApi(process.env.TELEGRAM_BOT, { polling: true });

const toString = ({ title, url, isAccessible }) => {
  return `–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: [${title}](${url})\n–î–æ—Å—Ç—É–ø–µ–Ω: ${
    isAccessible ? "‚úÖ" : "üö´"
  }\n \n`;
};

async function sendNotify({ title, url }) {
  const chats = await TelegramUser.find({}, "chat");
  for (let chat of chats) {
    await bot.sendMessage(
      chat.chat,
      `–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: [${title}](${url}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`
    );
  }
}

bot.setMyCommands([
  { command: "/start", description: "lkzsjernfdlksjdv" },
  { command: "/universities", description: "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤" },
  { command: "/auth", description: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" },
]);

bot.on("message", async (msg) => {
  const { text, chat } = msg;
  if (text === "/start") {
    await bot.sendSticker(
      chat.id,
      "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/1.webp"
    );
    return await bot.sendMessage(
      chat.id,
      "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–∂–≤–∞—Ç—å!**\n \n–ù–∞–ø–∏—à–∏—Ç–µ `/auth Email Password` —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n \n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/universities` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –í–£–ó–æ–≤",
      {
        parse_mode: "Markdown",
      }
    );
  }
  if (text === "/universities") {
    const universites = await University.find({}, "title url isAccessible");
    let message = "";
    for (const i in universites) {
      message = message + toString(universites[i]);
    }
    return await bot.sendMessage(chat.id, message, {
      parse_mode: "Markdown",
    });
  }
  if (text.split(" ")[0] === "/auth") {
    const email = text.split(" ")[1];
    const password = text.split(" ")[2];
    const user = await User.findOne({ email: email });
    if (user) {
      if (user.conconnectedTelegram) {
        return bot.sendMessage(chat.id, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω telegram")
      }
      const hashPassword = user.password;
      const validPassword = bcrypt.compareSync(password, hashPassword);
      if (validPassword) {
        const id = user._id;
        await User.findByIdAndUpdate(id, {
          $set: { conconnectedTelegram: true, chatId: chat.id },
        });
        return bot.sendMessage(chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
      }
      return bot.sendMessage(chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }
    return bot.sendMessage(chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
  return bot.sendMessage(chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã");
});

exports.sendNotify = sendNotify;
